---
title: "part2_calibration"
author: "Kyle Burt, Michelle Moreno"
format: html
editor: visual
---

# ESM 232 Calibration Part 2 Assignment

For this assignment, we use performance values derived from our high flow metric in Calibration Part 1 to generate a Maximum Likelihood Estimate (MLE) of streamflow. We focus on daily streamflow and August flow as our streamflow components of interest. Weighted average streamflows are computed using the top-performing parameter sets based on high flow month correlation. We then compare observed values to MLE results and compute correlations to evaluate model performance.

# Libraries

Loading libraries needed

```{r}
library(tidyverse)
library(here)
```

# Read metric function

Using and sourcing the High flow metric (enhanced version) function.

```{r}
source(here("R/compute_HighFlowMetrics_all.R"))
```

# Load data

Using msage data.

```{r}
msage <- readRDS(here("data", "msage.RDS"))
```

# Rearrange data

```{r}
msagel <- msage |> 
  gather(key = "sim", value = "str", -date, 
         -month, -day, -year, -wy,-obs)
```

# Apply accuracy measure to each parameter set

This applies the metric to all simulations. Then we create a combined performance score and filtering top simulations.

```{r}
res <-  msage |> 
  select(-date, -month, -day, -year, -wy, -obs ) |>
  apply(2, compute_HighFlowMetrics_all, o = msage$obs,
        month = msage$month, year = msage$year, 
        day = msage$day, wy = msage$wy) 

results <- as.data.frame(matrix(unlist(res), 
                               byrow = T, ncol = 5))

colnames(results) <- c("annual_min_err", "annual_min_cor", 
                       "low_month_err", "low_month_cor", 
                       "combined")

results$sim <- msage |> 
  select(-date, -month, -day, -year, -wy, -obs ) |> 
  colnames()
```

```{r}
summary(results)
```

# Use accuracy measure

```{r}
summary(results$combined)

# 1) Selecting behavioral or acceptable parameters sets
threshold <- 0.3

results_acc <- subset(results, combined > threshold)

head(results_acc)

# Top N parameter sets
topN <- 50

tmp <- results[order(results$combined, decreasing = T), ]

results_acc <- tmp[1:topN, ]

head(results_acc)
```

# Defining weights for parameter sets

### Weighting by performance score, normalizing weights for weighted averaging. 

```{r}
# Create a weight for each parameter set based on its relative accuracy
max_acc <- max(results_acc$combined)

min_acc <- min(results_acc$combined)

# Normalize weights
results_acc$w_acc <- (results_acc$combined - min_acc) / (max_acc - min_acc)

# Make sure weights sum to one
sum_acc <- sum(results_acc$combined)

results_acc$wt_acc <- results_acc$combined / sum_acc

# Look at values
summary(results_acc$wt_acc)

# Check to see that they sum to one
sum(results_acc$wt_acc)

Nacc <- nrow(results_acc)

print(Nacc)
```

# Using weights

### MLE Daily Flow Computation

```{r}
# Generate streamflow as weighted average of all acceptable parameter sets

# Subset only acceptable runs
msagel_acc <- subset(msagel, sim %in% results_acc$sim)

# Join with weights from res_acc, left_join will repeat weights for each day in streamflow trajectory
msagel_acc <- left_join(msagel_acc, results_acc, by = "sim")

head(msagel_acc)

# Finally multiply flow by weight
msagel_acc <- msagel_acc |> 
  mutate(str_wt = str * wt_acc)

# Now we can average streamflow for each day from all the runs # using the weights
aver_flow <- msagel_acc |>
  group_by(date) |>
  dplyr::summarize(str_mse = sum(str_wt))

# Add some date information 
aver_flow <- left_join(aver_flow, msage[, c("date", "month", 
                                            "year", "day", 
                                            "wy", "obs")],
  by = c("date"))
```

# Graphs

### Pivot data

```{r}
aver_flowl <- aver_flow |> 
  pivot_longer(cols = c(str_mse, obs), values_to = "str", 
               names_to = "type")
```

### Graphs of MLE and Observed Daily Streamflow

```{r}
ggplot(aver_flowl, aes(x = date, y = str, col = type)) +
  geom_line()+
  labs(y = "Streamflow mm/day")

# Add some of the other date info and plot a subset
wycheck <- 1985
ggplot(subset(aver_flowl, wy == wycheck), aes(x = date, y = str, col=type)) +  labs(y = "Streamflow mm/day") + geom_line()
```

### MLE for Monthly Flow (high-flow month proxy)

```{r}
# we could also calculate mse for august flow
# get monthly flow

# summarize monthly flow
msagel_month <- msagel %>%
  group_by(month, wy, sim) %>%
  dplyr::summarize(str = sum(str), obs = sum(obs))

# extract only acceptable runs

msagel_acc_month <- subset(msagel_month, sim %in% results_acc$sim)
# join with weights from res_acc, left_join will repeat weights for each month in streamflow trajectory
msagel_acc_month <- left_join(msagel_acc_month, results_acc, by = "sim")


# now MSE for monthly flow
mse_flow <- msagel_acc_month %>%  
  group_by(wy, month) %>%
  dplyr::summarize(str_mse = sum(str*wt_acc), obs = mean(obs))

# For comparison, compute MSE for all simulations
mse_flow_all <- msagel_month %>%
  group_by(wy, month) %>%
  dplyr::summarize(str_mse = mean(str))

mse_flow_all = left_join(mse_flow_all, mse_flow, by = c("wy", "month"), suffix = c("_all", "_mse"))

# see the impact of calibration
tmp = mse_flow_all %>% subset(month==8) 
cor(tmp$str_mse_all, tmp$obs)
cor(tmp$str_mse_mse, tmp$obs)

# but what about across all months
cor(mse_flow_all$str_mse_all, mse_flow_all$obs)
cor(mse_flow_all$str_mse_mse, mse_flow_all$obs)
```

# Graph Monthly MLE

used "month == 8" for August as a proxy for a high flow month.

```{r mlemonth2, echo=TRUE}
p1=ggplot(subset(msagel_acc_month, month==8), aes(wy, str, group=wy)) +
  geom_boxplot(position="dodge") +
  geom_point(aes(wy, obs), col="red") +
  labs(y = "Streamflow", x = "Date")

p1 + geom_point(data=subset(mse_flow, month==8), aes(wy, str_mse), col="blue") 
```

# Compare with results from last class {.scrollable}

```{r compare, echo=TRUE}

# plot mean August streamflow for all parameters and acceptable parameters
msagel_month_avg <- msagel_month %>%
  group_by(month, sim) %>%
  dplyr::summarize(str = mean(str), obs = mean(obs))
msagel_month_avg = msagel_month_avg %>% mutate(accept = ifelse(sim %in% results_acc$sim, "Accept", "Not"))

# read in the results from last class
goodpar = c(40, 42,29, 68,9,20, 12,32, 10,77)
other_cal_parms = paste0("V",goodpar)
msagel_month_avg$othercal = ifelse(msagel_month_avg$sim %in% other_cal_parms, "Accept B", "Not B")

# compute average august flow in observed
mean_august_obs = mean(subset(msagel_month_avg, month==8)$obs)
```

### Plot

```{r compare2, echo=TRUE}
p2 = ggplot(subset(msagel_month_avg, month==8), aes(x=accept, y=str))+geom_boxplot()+geom_hline(yintercept=mean_august_obs, col="red")+geom_boxplot(aes(x=othercal, y=str))  + labs(y = "Mean Streamflow\n", x = "Parameter set") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p2
```

## Try a different month {.scrollable}

```{r different_month, echo=TRUE}

# compute average december flow in observed
mean_dec_obs = mean(subset(msagel_month_avg, month==12)$obs)

p3 = ggplot(subset(msagel_month_avg, month==12), aes(x=accept, y=str))+geom_boxplot()+geom_hline(yintercept=mean_dec_obs, col="red")+geom_boxplot(aes(x=othercal, y=str))  + labs(y = "Mean Streamflow \nDecember", x = "Parameter set") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

p3
```

## Annual Total or Minimumm Flow {.scrollable}

```{r annual_total, echo=TRUE}
# calculate annual total streamflow
msagel_annual <- msagel %>%
  group_by(wy, sim) %>%
  dplyr::summarize(str = sum(str), obs = sum(obs), minstr=min(str), minobs=min(obs))

# added a column to indicate if the parameter set is acceptable
msagel_annual = msagel_annual %>% mutate(accept = ifelse(sim %in% results_acc$sim, "Accept", "Not"))

# also add a column for class good parameters
msagel_annual$othercal = ifelse(msagel_annual$sim %in% other_cal_parms, "Accept B", "Not B")

```

## Plot

```{r annual_total_plot, echo=TRUE}
# plot annual total streamflow
  p4 = ggplot(msagel_annual, aes(x=factor(wy), y=minstr, 
  fill=interaction(accept, othercal))) +
               geom_boxplot(position = position_dodge(width = 0.75)) + labs(x = "Water Year", y = "Streamflow (mm)", fill = "Accept Ã— OtherCal") +
  theme_minimal() + geom_point(aes(x=factor(wy), y=minobs), col="red")
  p4
```

## Results

The plot above shows the MLE and observed daily stream flow for the water year 1985. The MLE follows the observed trend but smooths out daily variation due to the averaging across parameter sets. The boxplot comparison for August flow shows that the MLE estimates are generally close to the observed values, with fewer extreme deviations than the uncalibrated runs. The correlation between MLE and observed stream flow is high (0.87 for daily, 0.91 for August), indicating good performance.
